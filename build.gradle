
plugins {
	id 'application'
	id 'java-library'
	id 'checkstyle'
	id 'jacoco' // code coverage
	id 'io.freefair.lombok' version '5.3.0'
	id 'com.github.johnrengelman.shadow' version '6.0.0'
	id "com.github.node-gradle.node" version "2.2.4" // Node
	id 'io.miret.etienne.sass' version '1.1.1' // SASS Compiler
}

group = 'com.xenosnowfox'
version = '0.0.0'
mainClassName = 'com.xenosnowfox.gachavote.Application'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
	mavenCentral()
}

dependencies {
	// Vendor Dependencies
	compileOnly 'org.projectlombok:lombok:1.18.20' // LomBok Project
	annotationProcessor 'org.projectlombok:lombok:1.18.20' // LomBok Project
	implementation 'com.h2database:h2:1.4.200' // H2 Embedded Database
	implementation 'com.sparkjava:spark-core:2.9.3'
	implementation 'commons-dbutils:commons-dbutils:1.7'
	implementation 'org.apache.commons:commons-dbcp2:2.8.0'
	implementation 'javax.websocket:javax.websocket-api:1.1'
	implementation 'org.glassfish.tyrus.bundles:tyrus-standalone-client:1.9'

	// Testing Dependencies
	testCompileOnly 'org.projectlombok:lombok:1.18.20' // LomBok Project
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.20' // LomBok Project
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.2'
}

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

compileJava {
	dependsOn 'compileSass'
	dependsOn 'yarnBuild'
	// dependsOn 'nodeBuildJS'
}

// Output to build/libs/gachavote.jar
shadowJar {
	archiveBaseName.set('gachavote')
	archiveClassifier.set('')
	archiveVersion.set("${project.property('version')}")
}

jacoco {
	toolVersion = "0.8.5"
	reportsDir = file("$buildDir/jacoco")
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // report is always generated after tests run
	maxParallelForks = 1
	maxHeapSize = '768m'
	// forkEvery = 100

	// listen to events in the test execution lifecycle
	beforeTest { descriptor ->
		logger.lifecycle("|  + Running test: " + descriptor)
	}

	beforeSuite { descriptor ->
		logger.lifecycle("|")
		logger.lifecycle("+- Running Suite: " + descriptor)
	}

	// listen to standard out and standard error of the test JVM(s)
	onOutput { descriptor, event ->
		logger.lifecycle("|       " + event.message )
	}
}

tasks.withType(Checkstyle) {
	reports {
		xml.enabled true
		html.enabled false
	}
}

processResources {
	filesMatching('**/*.properties') {
		filter { it.replace("\${project.name}", 'Gacha Vote') }
		filter { it.replace("\${project.version}", "${project.property('version')}")  }
		filter { it.replace("\${project.group}", "${project.property('group')}") }
	}
	filesMatching('**/*.html') {
		filter { it.replace("/css/style.css", "/css/style.css?v=${project.property('version')}") }
	}
}

sass {
	version = '1.26.10'
	directory = file ("${rootDir}/.gradle/sass")
	baseUrl = 'https://github.com/sass/dart-sass/releases/download'
}

compileSass {
	// Directory where to output generated CSS:
	outputDir = project.file ("${projectDir}/src/main/resources/webroot/css")

	// Source directory containing sass to compile:
	sourceDir = project.file ("${projectDir}/src/main/sass")

	// Adds a directory to sass load path (default is empty):
	// loadPath project.file ('sass-lib')
	// loadPath project.file ('/var/lib/compass')

	// Set the output style:
	// Possible values are "expanded" and "compressed", default is "expanded".
	style = expanded

	// Donâ€™t emit a @charset for CSS with non-ASCII chars (default to emit):
	noCharset ()

	// When an error occurs, do not emit a stylesheet describing it:
	// (Default to emit)
	noErrorCss ()

	// Watch sass files in sourceDir for changes
	// watch ()

	// Source map style:
	//  - file: output source map in a separate file (default)
	//  - embed: embed source map in CSS
	//  - none: do not emit source map.
	sourceMap = file

	// How to link source maps to source files [relative (default) or absolute]:
	sourceMapUrls = relative
}

task yarnBuild(type: YarnTask) {
	dependsOn 'yarn'
	args = ['build']
}

node {
	// Whether to download and install a specific Node.js version or not
	// If false, it will use the globally installed Node.js
	// If true, it will download node using above parameters
	// Note that npm is bundled with Node.js
	download = true

	// Version of node to download and install (only used if download is true)
	// It will be unpacked in the workDir
	version = "12.18.3"

	// Version of npm to use
	// If specified, installs it in the npmWorkDir
	// If empty, the plugin will use the npm command bundled with Node.js
	npmVersion = "6.14.6"

	// Version of Yarn to use
	// Any Yarn task first installs Yarn in the yarnWorkDir
	// It uses the specified version if defined and the latest version otherwise (by default)
	yarnVersion = "1.22.5"

	// Base URL for fetching node distributions
	// Only used if download is true
	// Change it if you want to use a mirror
	// Or set to null if you want to add the repository on your own.
	distBaseUrl = "https://nodejs.org/dist"

	// The npm command executed by the npmInstall task
	// By default it is install but it can be changed to ci
	npmInstallCommand = "install"

	// The directory where Node.js is unpacked (when download is true)
	workDir = file("${project.projectDir}/.gradle/nodejs")

	// The directory where npm is installed (when a specific version is defined)
	npmWorkDir = file("${project.projectDir}/.gradle/npm")

	// The directory where yarn is installed (when a Yarn task is used)
	yarnWorkDir = file("${project.projectDir}/.gradle/yarn")
}


task bumpVersion {
	doLast {

		println "Bumping version number..."

		def date = new Date()
		def calendar = Calendar.getInstance();
		calendar.setTime(date);
		int currentYear = calendar.get(Calendar.YEAR);
		int currentMonth = calendar.get(Calendar.MONTH) + 1;


		String previousVersion = version
		def (a, b, c) = version.tokenize('.')
		int buildYear = a.toInteger()
		int buildMonth = b.toInteger()
		int buildNumber = c.toInteger()

		if (buildYear == currentYear && buildMonth == currentMonth) {
			buildNumber++
		} else {
			buildYear = currentYear
			buildMonth = currentMonth
			buildNumber = 1
		}

		println "$previousVersion -> $buildYear.$buildMonth.$buildNumber"

		// update the version number in the build file
		def updated = buildFile.getText()
		updated = updated.replaceFirst("version = '$version'","version = '$buildYear.$buildMonth.$buildNumber'")
		buildFile.setText(updated)
	}
}

task gitTag {
	doLast {
		def cmd = "git tag $version"
		println cmd.execute().text.trim();
	}
}